

settlementChange
rewardConsumer
cms
channel-rpc
api
user-count-show-validate-task


1. 处理命名和error
2. check并且部署优化人数


cms
resolver
task 两个

cms
userprogressConsumer
livestreamprogressConsumer

userprogressCosnumerToUserCount



    private void sendProgressFinishedMessageToUserCount(long activityId, long userId, int finished) {
        String uniqueId = JOINER.join(activityId, userId, finished, System.currentTimeMillis());
        OperationActivityProgressFinishedMsg finishedMsg = OperationActivityProgressFinishedMsg.newBuilder()
                .setUniqueId(uniqueId)
                .setUserId(userId)
                .setActivityId(activityId)
                .setRemark(String.valueOf(finished))
                .build();
        MsgProducer producer = RocketMQTopicEnum.producer(OPERATION_ACTIVITY_PROGRESS_FINISHED_TO_USER_COUNT);
        MqMessage mqMessage = producer.createMsgBuilder(finishedMsg).build();
        MqSyncSendResult mqSyncSendResult = producer.sendSync(mqMessage);
        logger.info("send progress finished message to user Count, result = {}, message = {}",
                mqSyncSendResult.toString(), ObjectMapperUtils.toJSON(finishedMsg));
    }

    package com.kuaishou.operation.activity.runner.activity.mq.consumer;

import static com.kuaishou.operation.activity.component.mq.constants.RocketMQTopicEnum.OPERATION_ACTIVITY_PROGRESS_FINISHED_TO_USER_COUNT;

import java.time.Duration;
import java.util.List;

import javax.annotation.Nonnull;
import javax.annotation.PostConstruct;
import javax.annotation.Resource;

import org.apache.commons.collections4.CollectionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;

import com.github.phantomthief.collection.BufferTrigger;
import com.kuaishou.framework.util.ObjectMapperUtils;
import com.kuaishou.infra.framework.common.util.TermHelper;
import com.kuaishou.infra.framework.mq.ConsumeContext;
import com.kuaishou.infra.framework.mq.ConsumeResult;
import com.kuaishou.infra.framework.mq.MqConsumeMessage;
import com.kuaishou.infra.framework.mq.MqConsumer;
import com.kuaishou.infra.framework.mq.MqMessage;
import com.kuaishou.operation.activity.component.activity.service.OperationActivityUserProgressService;
import com.kuaishou.operation.activity.component.activity.service.OperationTaskUserCountService;
import com.kuaishou.operation.activity.component.kconf.OperationActivityIntegerKconf;
import com.kuaishou.protobuf.operation.activity.sdk.mq.model.OperationActivityProgressFinishedMsg;

import kuaishou.common.BizDef;

/**
 * @author wangqingwei <wangqingwei@kuaishou.com>
 * Created on 2021-01-25
 */
@Service
@Lazy
public class OperationTaskUserProgressToUserCountConsumer implements MqConsumer {

    private final Logger logger = LoggerFactory.getLogger(OperationTaskUserProgressToUserCountConsumer.class);

    private BufferTrigger<OperationActivityProgressFinishedMsg> bufferTrigger;
    @Resource
    private OperationActivityUserProgressService operationActivityUserProgressService;
    @Resource
    private OperationTaskUserCountService operationTaskUserCountService;

    @PostConstruct
    public void initBufferTrigger() {
        bufferTrigger = BufferTrigger.<OperationActivityProgressFinishedMsg> batchBlocking()
                .bufferSize(OperationActivityIntegerKconf.BUFFER_TRIGGER_BUFFER_SIZE.get())
                .batchSize(OperationActivityIntegerKconf.BUFFER_TRIGGER_BATCH_SIZE.get())
                .linger(() -> Duration.ofSeconds(OperationActivityIntegerKconf.BUFFER_TRIGGER_DURATION.get()))
                .setConsumerEx(this::processProgressToUserCountList)
                .build();
        TermHelper.addTerm(() -> {
            bufferTrigger.manuallyDoTrigger();
            logger.info(
                    "[OperationTaskUserProgressToUserCountConsumer] bufferTrigger closed, manual do the trigger");
        });
    }

    private void processProgressToUserCountList(List<OperationActivityProgressFinishedMsg> msg) {
        if (CollectionUtils.isEmpty(msg)) {
            return;
        }
        msg.forEach(curMsg -> {
            long activityId = curMsg.getActivityId();
            long userId = curMsg.getUserId();
            int finished = Integer.parseInt(curMsg.getRemark());
            // finshed 0 -> 1 修改userCount + 1
            if (finished == 0) {
                long count = operationActivityUserProgressService
                        .getActivityIdAndUserIdAndFinishedNoneZero(activityId, userId, finished);
                if (count == 0) {
                    operationTaskUserCountService.addCountByActivity(activityId, 1);
                    logger.info("[OperationTaskUserProgressToUserCountConsumer] activityId={}, userId, addCount={}", activityId, userId, 1);
                }
            }
        });
    }

    @Override
    public ConsumeResult onMessage(MqMessage message, ConsumeContext context) {
        MqConsumeMessage consumeMessage = (MqConsumeMessage) message;
        String messageId = consumeMessage.getMessageId();
        try {
            OperationActivityProgressFinishedMsg msg = OperationActivityProgressFinishedMsg.parseFrom(consumeMessage.getData());
            String messageJson = ObjectMapperUtils.toJSON(msg);
            logger.info("[OperationTaskUserProgressToUserCountConsumer] [begin] messageId = {}, message = {}",
                    messageId,
                    messageJson);
            bufferTrigger.enqueue(msg);
            logger.info("[OperationTaskUserProgressToUserCountConsumer] [end] messageId = {}, message = {}",
                    messageId,
                    messageJson);
            return ConsumeResult.SUCCESS;
        } catch (Exception e) {
            logger.error("[OperationTaskUserProgressToUserCountConsumer] error, messageId = {}", messageId, e);
            return ConsumeResult.LATER;
        }
    }

    @Nonnull
    @Override
    public String consumerGroup() {
        return OPERATION_ACTIVITY_PROGRESS_FINISHED_TO_USER_COUNT.getConsumerGroup();
    }

    @Nonnull
    @Override
    public String getLogicTopic() {
        return OPERATION_ACTIVITY_PROGRESS_FINISHED_TO_USER_COUNT.getTopic();
    }

    @Nonnull
    @Override
    public BizDef bizDef() {
        return BizDef.OPERATION;
    }

    @Nonnull
    @Override
    public String appKey() {
        return OPERATION_ACTIVITY_PROGRESS_FINISHED_TO_USER_COUNT.getAppKey();
    }
}





#!/bin/bash

if [ $# != 2 ] ; then
echo "USAGE: 参数格式为1个 1=BeanName"
echo " e.g.: ./consumer2.sh xxConsumer"
exit 1;
fi

ulimit -SHn 65535
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export JAVA_HOME=/opt/java/default
echo $JAVA_HOME
service_name=$1
port=$2

logs_home=/data/logs/wangqingwei/$1

/usr/bin/nohup $JAVA_HOME/bin/java -XX:+AggressiveOpts -XX:+UseStringDeduplication  -Xss256k -Xmx2G -Dfile.encoding=UTF-8 -DLOG_HOME=$logs_home -Djava.library.path=/usr/local/lib -cp ./dependency/*: com.kuaishou.framework.scheduler.SchedulerTaskStarte    r --task $service_name --port $port &

    
     @SuppressWarnings("checkstyle:MagicNumber")
    @GetMapping("/user/count/init")
    public void userCountInit(@RequestParam("startId") int startId,
            @RequestParam("endId") int endId) {
        int counts = 0;
        for (int i = startId; i <= endId; i++) {
            OperationTaskUserShow count = new OperationTaskUserShow();
            count.setTaskId(i);
            count.setCount(0);
            count.setExtParams(ObjectMapperUtils.toJSON(ImmutableMap.of()));
            count.setCreateTime(System.currentTimeMillis());
            count.setUpdateTime(System.currentTimeMillis());
            operationTaskUserShowService.batchInsert(Lists.newArrayList(count));
            OperationActivityDTO activity = operationActivityService.getActivity(i);
            if (activity == null) {
                logger.error("activityId= {}, activity={}", i, ObjectMapperUtils.toJSON(activity));
                continue;
            }
            if (activity.getStrategyId() == 0) {
                List<OperationActivityUserProgressGroupCount> groupCountListByActivityId =
                        operationActivityUserProgressDetailService
                                .getGroupCountListByActivityId(i,
                                        OperationActivityUserProgressStatusEnum.DONE);
                int finalI = i;
                groupCountListByActivityId.forEach(cur -> {
                    OperationTaskGroupUserShow show = new OperationTaskGroupUserShow();
                    show.setCount(0);
                    show.setGroupId(cur.getGroupId());
                    show.setExtParams(ObjectMapperUtils.toJSON(ImmutableMap.of()));
                    show.setTaskId(finalI);
                    show.setCreateTime(System.currentTimeMillis());
                    show.setUpdateTime(System.currentTimeMillis());
                    operationTaskGroupUserShowService.batchInsert(Lists.newArrayList(show));
                });
            } else {
                logger.error("activityId= {},is strategy={}, activity={}, ", i, activity.getStrategyId(), ObjectMapperUtils.toJSON(activity));
            }
            counts += 1;
        }
        logger.info("insert int user_counts is {}", counts);
    }

    @SuppressWarnings("checkstyle:MagicNumber")
    @GetMapping("/user/count/add")
    public void userCountInit2(@RequestParam("activityId") long activityId,
            @RequestParam("count") long value) {
        OperationTaskUserShow count = new OperationTaskUserShow();
        count.setTaskId(activityId);
        count.setCount(value);
        count.setExtParams(ObjectMapperUtils.toJSON(ImmutableMap.of()));
        count.setCreateTime(System.currentTimeMillis());
        count.setUpdateTime(System.currentTimeMillis());
        operationTaskUserShowService.batchInsert(Lists.newArrayList(count));
        logger.info("userCountAdd={}", ObjectMapperUtils.toJSON(count));
    }
    
    @GetMapping("/user/count/add2")
    public void userCountInit2(@RequestParam("activityId") long activityId,
            @RequestParam("groupId") long groupId,
            @RequestParam("count") long value) {
        OperationTaskGroupUserShow count = new OperationTaskGroupUserShow();
        count.setTaskId(activityId);
        count.setCount(value);
        count.setGroupId(groupId);
        count.setExtParams(ObjectMapperUtils.toJSON(ImmutableMap.of()));
        count.setCreateTime(System.currentTimeMillis());
        count.setUpdateTime(System.currentTimeMillis());
        operationTaskGroupUserShowService.batchInsert(Lists.newArrayList(count));
        logger.info("userCountAdd2={}", ObjectMapperUtils.toJSON(count));
    }





    @GetMapping("/export/user/count")
    public void exportUserCount(@RequestParam("startId") long startId,
            @RequestParam("endId") long endId, HttpServletResponse response) {
        Workbook workbook = ExcelUtils.createWorkBook();
        Sheet sheet = workbook.createSheet();
        ExcelUtils.writeHeader(sheet, ImmutableList
                .of("任务ID", "userCount", "userProgressCount"));

        for (int i = (int) startId; i <= endId; i++) {
            List<Object> values = Lists.newArrayList();
            long finishCount = operationActivityUserProgressService.getFinishCount(i);
            long userCount = operationTaskUserShowService.getByTaskId(i);
            values.add(i);
            values.add(userCount);
            values.add(finishCount);
            ExcelUtils.writeRow(sheet, values);
        }
        try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
            workbook.write(baos);
            download(response, baos.toByteArray(), "任务count", "xlsx");
        } catch (IOException e) {
            logger.error("生成excel文件失败", e);
        }
    }
    
    @GetMapping("/export/user/count2")
    public void exportUserCount2(@RequestParam("startId") long startId,
            @RequestParam("endId") long endId, HttpServletResponse response) {
        Workbook workbook = ExcelUtils.createWorkBook();
        Sheet sheet = workbook.createSheet();
        ExcelUtils.writeHeader(sheet, ImmutableList
                .of("任务ID", "groupId", "userCount", "userProgressCount"));

        for (int i = (int) startId; i <= endId; i++) {
            OperationActivityDTO activity = operationActivityService.getActivity(i);
            if (activity == null) {
                logger.error("activityId= {}, activity={}", i, ObjectMapperUtils.toJSON(activity));
                continue;
            }
            if (activity.getStrategyId() == 0) {
                List<OperationActivityUserProgressGroupCount> groupCountListByActivityId =
                        operationActivityUserProgressDetailService
                                .getGroupCountListByActivityId(i,
                                        OperationActivityUserProgressStatusEnum.DONE);
                int finalI = i;
                groupCountListByActivityId.forEach(cur -> {
                    long curCount = cur.getCount();
                    long groupUserCount = operationTaskGroupUserShowService.getByTaskIdAndGroupId(finalI, cur.getGroupId());
                    List<Object> values = Lists.newArrayList();
                    values.add(finalI);
                    values.add(cur.getGroupId());
                    values.add(groupUserCount);
                    values.add(curCount);
                    ExcelUtils.writeRow(sheet, values);
                });
            } else {
                logger.error("activityId= {},is strategy={}, activity={}, ", i, activity.getStrategyId(), ObjectMapperUtils.toJSON(activity));
            }
        }
        try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
            workbook.write(baos);
            download(response, baos.toByteArray(), "任务梯度count", "xlsx");
        } catch (IOException e) {
            logger.error("生成excel文件失败", e);
        }
    }
    
    @GetMapping("/user/count/copy")
    public void copy(@RequestParam("startId") int startId,
            @RequestParam("endId") int endId) {
        for (int i = startId; i <= endId; i++) {
            long finishCount = operationActivityUserProgressService.getFinishCount(i);
            logger.info("activityId ={}, finishCount = {}", i, finishCount);
            operationTaskUserShowService.updateByTaskId(i, finishCount);
            OperationActivityDTO activity = operationActivityService.getActivity(i);
            if (activity == null) {
                logger.error("activityId= {}, activity={}", i, ObjectMapperUtils.toJSON(activity));
                continue;
            }
            if (activity.getStrategyId() == 0) {
                List<OperationActivityUserProgressGroupCount> groupCountListByActivityId =
                        operationActivityUserProgressDetailService
                                .getGroupCountListByActivityId(i,
                                        OperationActivityUserProgressStatusEnum.DONE);
                int finalI = i;
                groupCountListByActivityId.forEach(cur -> {
                    logger.info("activityId ={}, groupId = {}, finishCount = {}", finalI, cur.getGroupId(), cur.getCount());
                    operationTaskGroupUserShowService.updateByTaskIdAndGroupId(finalI, cur.getGroupId(), cur.getCount());
                });
            } else {
                logger.error("activityId= {},is strategy={}, activity={}, ", i, activity.getStrategyId(), ObjectMapperUtils.toJSON(activity));
            }
        }
        logger.info("copy end");
    }







